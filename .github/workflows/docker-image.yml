# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Deploy to Amazon ECR

on:
  push:
    branches:
      - master



jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: test

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          #role-to-assume: arn:aws:iam::062594673280:role/git-workflow
          aws-access-key-id: AKIAQ5EXO5KAIS6OZ45I
          aws-secret-access-key: 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
          aws-region: ap-southeast-2
          #mask-aws-account-id: 'false'

      - name: Login to Amazon ECR Private
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
         # mask-password: 'false'

     
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          #IMAGE_TAG: ${{ github.sha }}
          ECR_REPOSITORY: test-latest
          IMAGE_TAG: test-latest
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t test-latest:$IMAGE_TAG .
           echo "Pushing image to ECR..."
          docker push test-latest:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      

      #- name: Deploy Amazon ECS task definition #agai
       # uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
      #  with:
         # task-definition: ${{ steps.task-def.outputs.task-definition }}
         # service: ${{ env.ECS_SERVICE }}
          #cluster: ${{ env.ECS_CLUSTER }}
          #wait-for-service-stability: true..
          ## save later for ecs

          
